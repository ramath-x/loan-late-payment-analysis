-- DROP PROCEDURE get_arrears_history
DELIMITER //
CREATE PROCEDURE get_arrears_history () BEGIN
	WITH prev_arrears AS (
	SELECT
		id,
		loan_id,
		effective_date,
		arrears_amount,-- 				เอา arrears_amount ก่อนหน้าของ loan_id
		LAG ( arrears_amount ) OVER ( PARTITION BY loan_id ORDER BY id ) AS prev_arrears 
	FROM
		`transaction` 
	),
	
	late_payments AS ( 
	SELECT * 
	FROM prev_arrears 
	-- 		เอา เคสที่ แรกที่ยอดเป็น 0  ออก
	WHERE prev_arrears IS NOT NULL 
	-- 		ยอดติดลบหรือยอดเคงเหลือที่จ่ายออก ออก
	AND NOT ( arrears_amount < 0 AND prev_arrears < 0 ) 
	),
	
	delinquency_periods AS ( 
	SELECT * 
	FROM late_payments -- 			เอาแถวระหว่างที่ออกค้างชำระต่อเนื่องออก
	WHERE 
		CASE 
			WHEN NOT ( arrears_amount > 0 AND prev_arrears > 0 ) 
				THEN 'top_low' 
			ELSE NULL 
		END = 'top_low' 
		),
		
	arrears_history AS (
	SELECT
		*,
		effective_date AS start_date,
		-- 			เพิ่มคอลัมน์เพื่อคำนวณระยะเวลาการค้างชำระ
		IFNULL( LEAD ( effective_date ) OVER ( PARTITION BY loan_id ORDER BY id ), CURRENT_DATE ) AS end_date,
		DATEDIFF( LEAD ( effective_date ) OVER ( PARTITION BY loan_id ORDER BY id ), effective_date ) AS date_diff 
	FROM
		delinquency_periods 
	) 
	
	SELECT
	loan_id,
	-- 		กรณีชำระตรงเวลา ไม่มีการค้างชำระ
	IF(
			sum( date_diff ) = 0,	0,count( loan_id )
		) AS number_of_delinquency,
	-- 		หาจำนวนวันทั้งหมด
	SUM(
			DATEDIFF( end_date, start_date )
		) AS total_day_of_delinquency,
		-- 		หาจำนวนวันสูงสุดที่เคยค้างชำระ
	MAX(
			DATEDIFF( end_date, start_date )
		) AS maximum_day_of_delinquency 
	FROM
		arrears_history 
	WHERE
		( arrears_amount > 0 AND prev_arrears = 0 ) 
	GROUP BY
		loan_id;
	END //
	DELIMITER;